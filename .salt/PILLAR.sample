# This file contains default values which are used
# by the salt states deploying your project.
# you may copy them to your relevant PILLAR file
# before editing them.
# If you need to add variables, this is where to begin.
# Please keep defaults in there, but real passwords
# must be putted inside pillar
#
# replace project_name in your pillar by
# the current projectname
# you can also merge parts of this file
# with the relevant pillar
#
# think that dicts are updated/merged with default
# but lists are overidden
makina-projects.projectname:
  env_defaults:
    dev:
      es_env:
        ES_MAX_MEM: "512m"
        ES_MIN_MEM: "512m"
  data:
    # add a nginx vhost on port 80
    version: '2.3.3'
    use_http_proxy: True
    # if set to true, we still use nginx as a proxy
    # but we do not firewall, we
    # still resepect http users if sets, but not
    # filter based on http methods
    http_proxy_passthrough: False
    backup_disabled: true
    keep_days: '2'
    keep_lasts: '2'
    keep_monthes: '0'
    keep_weeks: '0'
    keep_logs: '7'
    sroot: '{data_root}/es'
    sdata: '{data_root}/es/data'
    prefix: '{data_root}/es/root-{version}'
    master: true
    configs:
      "config/logging.yml":
        target: "{prefix}/config/logging.yml"
      "config/elasticsearch.yml":
        target: "{prefix}/config/elasticsearch.yml"
    # defaults to the major version of es selected by 'version', eg 2, the integer
    # it will take the appropriate plugins list in the 'plugins' configuration key
    # plugins_selector: 2
    plugins:
      1:
        - mobz/elasticsearch-head: head
        - karmi/elasticsearch-paramedic: paramedic
      2:
        - mobz/elasticsearch-head: head
        - mapper-attachments: mapper-attachments
    nginx_proxy_upstream: 'salt://makina-projects/{name}/files/nginx.proxy.top.conf'
    nginx_proxy_vhost: 'salt://makina-projects/{name}/files/nginx.proxy.conf'
    nginx_fw_upstream: 'salt://makina-projects/{name}/files/nginx.top.conf'
    nginx_fw_vhost: 'salt://makina-projects/{name}/files/nginx.conf'
    # es version defs
    es_bn: "elasticsearch-{version}"
    es_tb: "{es_bn}.tar.gz"
    es_url: "https://download.elasticsearch.org/elasticsearch/elasticsearch/{es_tb}"
    domain: "{fqdn}"
    ssl_protected: true
    start_cmd: './elasticsearch'
    start_args: []
    start_es_env:
      ES_JAVA_OPTS: ""
      ES_MAX_MEM: "2g"
      ES_MIN_MEM: "2g"
      ES_USE_IPV4: "1"
    es_network_publish_host: null
    # set this to a specific interface if neccessary
    # es_bind_host: '127.0.0.1'
    es_cluster_name: "elasticsearch"
    es_http_jsonp: "true"
    es_mlockall: "true"
    es_node_name: "{fqdn}"
    es_action_disable_delete_all_indices: "true"
    es_node_master: "true"
    es_node_data: "true"
    es_number_of_shards: "6"
    es_number_of_replicas: "1"
    es_http_port: "9200"
    es_tcp_port: "9300"
    es_http_max_content_length: "1000mb"
    es_discovery_zen_ping_multicast_enabled: "false"
    es_discovery_zen_minimum_master_nodes: 1
    es_discovery_zen_ping_unicast_hosts: []
    es_log_level: INFO
    es_log_level_action: DEBUG
    es_log_index_search_slowlog: "false"
    es_log_index_indexing_slowlog: "false"
    bundle_top_sync: ['bin', 'lib']
    bundle_data_sync: ['plugins', 'data', 'logs', 'tmp']
    bundle_data_ver_sync: ['config']
    htpasswd_base: "/etc/nginx/{0}-es-htpasswd-{1}"
    acls:
      readonlys:
        allowed: []
        restricted: [GET, HEAD, OPTIONS]
        denied: []
      default:
        allowed: []
        restricted: [GET, HEAD, OPTIONS,
                           PUT, POST, MKCOL, COPY,
                           PROPFIND, PROPPATCH,
                           LOCK, UNLOCK,
                           PATCH, DELETE]
        denied: []
      # admins acl default to default acl, unless, you redefine those adter
      #admins:
      #  allowed: []
      #  restricted: [GET, HEAD, PUT, POST, MKCOL, COPY, PROPFIND, PROPPATCH, LOCK, UNLOCK, PATCH,OPTIONS, DELETE]
      #  denied: []
    # define here each core, and its configuration template folder
    # the acls are inherited from default unless you redefine them
    # in the 'acls' subdict, see this testindex definition example
    #indexes:
    #   # warning: allowed & denied are global switches (not tied to users)
    #   # access is auth only by default,
    #   # and here access granted to testuser2 & testuser
    #   - testindex:
    #       users: [testuser, testuser2]
    #   # unrestrict any access to this full index, even for anonymous
    #   - testindex3:
    #       acls:
    #         restricted: []
    #         allowed: [GET, HEAD, OPTIONS,
    #                   PUT, POST, MKCOL, COPY,
    #                   PROPFIND, PROPPATCH,
    #                   LOCK, UNLOCK,
    #                   PATCH, DELETE]
    #   # allow testuser2 & testuser with default acls on index
    #   # unrestrict access on all for testuser
    #   # unrestrict access on foo type for all methods & all users & anon
    #   # unrestrict access on bar type for user testuser5 but only for
    #   # GET, HEAD, OPTIONS
    #   - testindex4:
    #       users: [testuser]
    #       types:
    #         bar:
    #           users: [testuser5]
    #           acls:
    #             allowed: []
    #             restricted: [GET, HEAD, OPTIONS]
    #             denied: [POST, PUT, MKCOL, COPY,
    #                      PROPFIND, PROPPATCH,
    #                      LOCK, UNLOCK,
    #                      PATCH, DELETE]
    #         toto:
    #           users: [testuser2]
    #           acls:
    #             allowed: []
    #             restricted: [GET, HEAD, OPTIONS,
    #                       PUT, POST, MKCOL, COPY,
    #                       PROPFIND, PROPPATCH,
    #                       LOCK, UNLOCK,
    #                       PATCH, DELETE]
    #         foo:
    #           users: [testuser5]
    #           acls:
    #             restricted: []
    #             allowed: [GET, HEAD, OPTIONS,
    #                       PUT, POST, MKCOL, COPY,
    #                       PROPFIND, PROPPATCH,
    #                       LOCK, UNLOCK,
    #                       PATCH, DELETE]
    # Define here all users, and their password
    # admins is like users but define global admins
    # admin will always be added both as an user and an admin, whatever you override in pillar
    #admins:
    #  - admin
    users:
      # override at least this first password as it is the global es administarator
      # if you want to auto generate the password, just adapt the line for admin
      # to adapt the generated key for you user
      - admin: {password: {{salt['mc_utils.generate_stored_password']("ESuser_admin")}}}
    # allow users to have access to some global API
    # for now this matchs only  /_search
    #readonlys:
    #  - foo

# vim:set ft=yaml:
